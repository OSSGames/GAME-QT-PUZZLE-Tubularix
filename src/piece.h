/***************************************************************************
 *   Copyright (C) 2008, 2009, 2010, 2011 by Miguel Escudero Gestal
 *   miguelescudero@users.sourceforge.net
 *
 *   This file is part of tubularix
 *
 *   tubularix is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   tubularix is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program. If not, see <http://www.gnu.org/licenses/>.
 ***************************************************************************/

#ifndef PIECE_H
#define PIECE_H

#include <QtGlobal>

//the first index indicates the rotation style:
//0 - default
//1 - classical tetris rotation
//2 - classical modified (J and L are at the same place when rotated 180º)
//3 - the old one
const char Pieces[][7][4][4][4] =
//default
{{{{{0,0,0,0},
   {0,0,0,0},
   {1,1,0,0},
   {1,1,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {1,1,0,0},
   {1,1,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {1,1,0,0},
   {1,1,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {1,1,0,0},
   {1,1,0,0}}},
//
 {{{0,2,0,0},
   {0,2,0,0},
   {0,2,0,0},
   {0,2,0,0}},

  {{0,0,0,0},
   {2,2,2,2},
   {0,0,0,0},
   {0,0,0,0}},

  {{0,2,0,0},
   {0,2,0,0},
   {0,2,0,0},
   {0,2,0,0}},

  {{0,0,0,0},
   {2,2,2,2},
   {0,0,0,0},
   {0,0,0,0}}},
//
 {{{0,0,0,0},
   {0,3,0,0},
   {3,3,0,0},
   {3,0,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {3,3,0,0},
   {0,3,3,0}},

  {{0,0,0,0},
   {0,3,0,0},
   {3,3,0,0},
   {3,0,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {3,3,0,0},
   {0,3,3,0}}},
//
 {{{0,0,0,0},
   {4,0,0,0},
   {4,4,0,0},
   {0,4,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,4,4,0},
   {4,4,0,0}},

  {{0,0,0,0},
   {4,0,0,0},
   {4,4,0,0},
   {0,4,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,4,4,0},
   {4,4,0,0}}},
//
 {{{0,0,0,0},
   {0,5,5,0},
   {0,0,5,0},
   {0,0,5,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,0,5,0},
   {5,5,5,0}},

  {{0,0,0,0},
   {5,0,0,0},
   {5,0,0,0},
   {5,5,0,0}},

  {{0,0,0,0},
   {5,5,5,0},
   {5,0,0,0},
   {0,0,0,0}}},
//
 {{{0,0,0,0},
   {6,6,0,0},
   {6,0,0,0},
   {6,0,0,0}},

  {{0,0,0,0},
   {6,6,6,0},
   {0,0,6,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,0,6,0},
   {0,0,6,0},
   {0,6,6,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {6,0,0,0},
   {6,6,6,0}}},
//
 {{{0,0,0,0},
   {0,7,0,0},
   {0,7,7,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {7,7,7,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,7,0,0},
   {7,7,0,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,7,0,0},
   {7,7,7,0},
   {0,0,0,0}}}},



//classical
{{{{0,0,0,0},
   {0,1,1,0},
   {0,1,1,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,1,1,0},
   {0,1,1,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,1,1,0},
   {0,1,1,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,1,1,0},
   {0,1,1,0},
   {0,0,0,0}}},
//
 {{{0,0,2,0},
   {0,0,2,0},
   {0,0,2,0},
   {0,0,2,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {2,2,2,2},
   {0,0,0,0}},

  {{0,0,2,0},
   {0,0,2,0},
   {0,0,2,0},
   {0,0,2,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {2,2,2,2},
   {0,0,0,0}}},
//
 {{{0,0,0,0},
   {0,0,3,0},
   {0,3,3,0},
   {0,3,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {3,3,0,0},
   {0,3,3,0}},

  {{0,0,0,0},
   {0,0,3,0},
   {0,3,3,0},
   {0,3,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {3,3,0,0},
   {0,3,3,0}}},
//
 {{{0,0,0,0},
   {0,4,0,0},
   {0,4,4,0},
   {0,0,4,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,4,4,0},
   {4,4,0,0}},

  {{0,0,0,0},
   {0,4,0,0},
   {0,4,4,0},
   {0,0,4,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,4,4,0},
   {4,4,0,0}}},
//
 {{{0,0,0,0},
   {0,5,0,0},
   {0,5,0,0},
   {0,5,5,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {5,5,5,0},
   {5,0,0,0}},

  {{0,0,0,0},
   {5,5,0,0},
   {0,5,0,0},
   {0,5,0,0}},

  {{0,0,0,0},
   {0,0,5,0},
   {5,5,5,0},
   {0,0,0,0}}},
//
 {{{0,0,0,0},
   {0,6,0,0},
   {0,6,0,0},
   {6,6,0,0}},

  {{0,0,0,0},
   {6,0,0,0},
   {6,6,6,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,6,6,0},
   {0,6,0,0},
   {0,6,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {6,6,6,0},
   {0,0,6,0}}},
//
 {{{0,0,0,0},
   {0,7,0,0},
   {0,7,7,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {7,7,7,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,7,0,0},
   {7,7,0,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,7,0,0},
   {7,7,7,0},
   {0,0,0,0}}}},



//classical modified
{{{{0,0,0,0},
   {0,1,1,0},
   {0,1,1,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,1,1,0},
   {0,1,1,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,1,1,0},
   {0,1,1,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,1,1,0},
   {0,1,1,0},
   {0,0,0,0}}},
//
 {{{0,0,2,0},
   {0,0,2,0},
   {0,0,2,0},
   {0,0,2,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {2,2,2,2},
   {0,0,0,0}},

  {{0,0,2,0},
   {0,0,2,0},
   {0,0,2,0},
   {0,0,2,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {2,2,2,2},
   {0,0,0,0}}},
//
 {{{0,0,0,0},
   {0,0,3,0},
   {0,3,3,0},
   {0,3,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {3,3,0,0},
   {0,3,3,0}},

  {{0,0,0,0},
   {0,0,3,0},
   {0,3,3,0},
   {0,3,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {3,3,0,0},
   {0,3,3,0}}},
//
 {{{0,0,0,0},
   {0,4,0,0},
   {0,4,4,0},
   {0,0,4,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,4,4,0},
   {4,4,0,0}},

  {{0,0,0,0},
   {0,4,0,0},
   {0,4,4,0},
   {0,0,4,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,4,4,0},
   {4,4,0,0}}},
//
 {{{0,0,0,0},
   {0,5,0,0},
   {0,5,0,0},
   {0,5,5,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {5,5,5,0},
   {5,0,0,0}},

  {{0,0,0,0},
   {0,5,5,0},
   {0,0,5,0},
   {0,0,5,0}},

  {{0,0,0,0},
   {0,0,5,0},
   {5,5,5,0},
   {0,0,0,0}}},
//
 {{{0,0,0,0},
   {0,0,6,0},
   {0,0,6,0},
   {0,6,6,0}},

  {{0,0,0,0},
   {6,0,0,0},
   {6,6,6,0},
   {0,0,0,0}},

  {{0,0,0,0},
   {0,6,6,0},
   {0,6,0,0},
   {0,6,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {6,6,6,0},
   {0,0,6,0}}},
//
 {{{0,0,0,0},
   {0,7,0,0},
   {0,7,7,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {7,7,7,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,7,0,0},
   {7,7,0,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,7,0,0},
   {7,7,7,0},
   {0,0,0,0}}}},



//the old one
{{{{0,0,0,0},
   {0,0,0,0},
   {1,1,0,0},
   {1,1,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {1,1,0,0},
   {1,1,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {1,1,0,0},
   {1,1,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {1,1,0,0},
   {1,1,0,0}}},
//
 {{{2,0,0,0},
   {2,0,0,0},
   {2,0,0,0},
   {2,0,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,0,0,0},
   {2,2,2,2}},

  {{2,0,0,0},
   {2,0,0,0},
   {2,0,0,0},
   {2,0,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,0,0,0},
   {2,2,2,2}}},
//
 {{{0,0,0,0},
   {0,3,0,0},
   {3,3,0,0},
   {3,0,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {3,3,0,0},
   {0,3,3,0}},

  {{0,0,0,0},
   {0,3,0,0},
   {3,3,0,0},
   {3,0,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {3,3,0,0},
   {0,3,3,0}}},
//
 {{{0,0,0,0},
   {4,0,0,0},
   {4,4,0,0},
   {0,4,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,4,4,0},
   {4,4,0,0}},

  {{0,0,0,0},
   {4,0,0,0},
   {4,4,0,0},
   {0,4,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,4,4,0},
   {4,4,0,0}}},
//
 {{{0,0,0,0},
   {5,0,0,0},
   {5,0,0,0},
   {5,5,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {5,5,5,0},
   {5,0,0,0}},

  {{0,0,0,0},
   {5,5,0,0},
   {0,5,0,0},
   {0,5,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,0,5,0},
   {5,5,5,0}}},
//
 {{{0,0,0,0},
   {0,6,0,0},
   {0,6,0,0},
   {6,6,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {6,0,0,0},
   {6,6,6,0}},

  {{0,0,0,0},
   {6,6,0,0},
   {6,0,0,0},
   {6,0,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {6,6,6,0},
   {0,0,6,0}}},
//
 {{{0,0,0,0},
   {7,0,0,0},
   {7,7,0,0},
   {7,0,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {7,7,7,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,7,0,0},
   {7,7,0,0},
   {0,7,0,0}},

  {{0,0,0,0},
   {0,0,0,0},
   {0,7,0,0},
   {7,7,7,0}}}}};


class Piece
{
public:
	Piece();

	int selectedPiece() {return selPiece;}
	//void setSelectedPiece(int newPiece) {selPiece = newPiece;}
	int selectPiece(int num = -1);
	void setLimits(int leftLimit = 0, int rightLimit = 11);
	int getRotationStyle() {return rotationStyle;}
	void setRotationStyle(int style = 0);

	//piece's current properties
	int posX() {return x;}
	int posY() {return y;}
	void setPosX(int n, bool reset = true);
	void setPosY(int n, bool reset = true);
	int rotationPos() {return rotPos;}
	void setRotationPos(int newRotationPos);
	void rotateClockwise();
	void rotateCounterClockwise();
	int width();
	int height();

	//this functions provide the position of the first non-zero value of the matrix on their respective sides
	int firstLeft();
	int firstRight();
	int firstUp();
	int firstDown();
	int firstLeftAtRow(int row);
	int firstRightAtRow(int row);
	int firstUpAtColumn(int column);
	int firstDownAtColumn(int column);

	//piece's previous properties
	int previousPosX() {return previousX;}
	int previousPosY() {return previousY;}
	void setPreviousPosX(int n);
	void setPreviousPosY(int n);
	int previousRotationPos() {return previousRotPos;}
	int previousWidth();
	int previousHeight();
	void resetPreviousProperties();

	//this functions provide the position of the first non-zero value of the matrix on their respective sides
	int previousFirstLeft();
	int previousFirstRight();
	int previousFirstUp();
	int previousFirstDown();
	/*
	int firstLeftAtRow(int row);
	int firstRightAtRow(int row);
	int firstUpAtColumn(int column);
	int firstDownAtColumn(int column);
	*/

	//debería ser privada, para lo cual debería haber un método para devolver dicha matriz
	char pieceMatrix[4][4];
	char previousPieceMatrix[4][4];
	//char *matrix();
	//char *previousMatrix();

private:
	int x;
	int y;
	int previousX;
	int previousY;
	int leftLimit;
	int rightLimit;
	int rotPos;
	int previousRotPos;
	int selPiece;

	int rotationStyle;

	//char pieceMatrix[4][4];
	//char previousPieceMatrix[4][4];
};

#endif // PIECE_H
